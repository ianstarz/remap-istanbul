{"version":3,"sources":["../src/CoverageTransformer.js"],"names":["require","Collector","path","fs","SourceMapConsumer","sourceMapRegEx","SparceCoverageCollector","getMapping","remapFunction","remapBranch","CoverageTransformer","options","basePath","warn","console","exclude","fileName","indexOf","match","useAbsolutePaths","readJSON","filePath","existsSync","Error","JSON","parse","readFileSync","readFile","sourceStore","sources","sparceCoverageCollector","fileCoverage","codeIsArray","codeFromFile","jsText","code","Array","isArray","join","exec","sourceMapDir","dirname","rawSourceMap","Buffer","toString","sourceMapPath","String","split","error","setCoverage","map","srcPath","substr","resolve","sourceMap","inlineSourceMap","origSourceFilename","origFileName","sourcesContent","extname","file","replace","sourceRoot","forEach","source","idx","setSourceCode","set","resolvePath","resolvedSource","relative","process","cwd","getMappingResolved","location","mapping","branchMap","index","genItem","hits","b","info","updateBranch","srcItem","fnMap","f","updateFunction","statementMap","s","updateStatement","loc","srcCoverage","getFinalCoverage","getPath","absolutePath","fullSourceMapPath","item","addFileCoverage","collector","add","filter","reduce","obj","name","module","exports"],"mappings":"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","file":"CoverageTransformer.js","sourcesContent":["const { Collector } = require('istanbul');\nconst path = require('path');\nconst fs = require('fs');\nconst { SourceMapConsumer } = require('source-map');\n\nconst sourceMapRegEx = /(?:\\/{2}[#@]{1,2}|\\/\\*)\\s+sourceMappingURL\\s*=\\s*(data:(?:[^;]+;)+base64,)?(\\S+)/;\n\nconst SparceCoverageCollector = require('./SparceCoverageCollector').SparceCoverageCollector;\n\nconst getMapping = require('./getMapping');\n\nconst remapFunction = require('./remapFunction');\nconst remapBranch = require('./remapBranch');\n\n\nclass CoverageTransformer {\n\tconstructor(options) {\n\t\tthis.basePath = options.basePath;\n\t\tthis.warn = options.warn || console.warn;\n\n\t\tthis.exclude = () => false;\n\t\tif (options.exclude) {\n\t\t\tif (typeof options.exclude === 'function') {\n\t\t\t\tthis.exclude = options.exclude;\n\t\t\t} else if (typeof options.exclude === 'string') {\n\t\t\t\tthis.exclude = (fileName) => fileName.indexOf(options.exclude) > -1;\n\t\t\t} else {\n\t\t\t\tthis.exclude = (fileName) => fileName.match(options.exclude);\n\t\t\t}\n\t\t}\n\n\t\tthis.useAbsolutePaths = !!options.useAbsolutePaths;\n\n\t\tthis.readJSON = options.readJSON\n\t\t\t|| function readJSON(filePath) {\n\t\t\t\tif (!fs.existsSync(filePath)) {\n\t\t\t\t\tthis.warn(Error(`Could not find file: \"${filePath}\"`));\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn JSON.parse(fs.readFileSync(filePath));\n\t\t\t};\n\n\t\tthis.readFile = options.readFile\n\t\t\t|| function readFile(filePath) {\n\t\t\t\tif (!fs.existsSync(filePath)) {\n\t\t\t\t\tthis.warn(new Error(`Could not find file: \"${filePath}\"`));\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\treturn fs.readFileSync(filePath);\n\t\t\t};\n\n\t\tthis.sourceStore = options.sources;\n\n\t\tthis.sparceCoverageCollector = new SparceCoverageCollector();\n\t}\n\n\taddFileCoverage(filePath, fileCoverage) {\n\t\tif (this.exclude(filePath)) {\n\t\t\tthis.warn(`Excluding: \"${filePath}\"`);\n\t\t\treturn;\n\t\t}\n\n\t\t/* coverage.json can sometimes include the code inline */\n\t\tlet codeIsArray = true;\n\t\tlet codeFromFile = false;\n\t\tlet jsText = fileCoverage.code;\n\t\tif (!jsText) {\n\t\t\tjsText = this.readFile(filePath);\n\t\t\tcodeFromFile = true;\n\t\t}\n\t\tif (Array.isArray(jsText)) { /* sometimes the source is an array */\n\t\t\tjsText = jsText.join('\\n');\n\t\t} else {\n\t\t\tcodeIsArray = false;\n\t\t}\n\t\tlet match = sourceMapRegEx.exec(jsText);\n\t\tlet sourceMapDir = path.dirname(filePath);\n\t\tlet rawSourceMap;\n\n\t\tif (!match && !codeFromFile) {\n\t\t\tcodeIsArray = false;\n\t\t\tjsText = this.readFile(filePath);\n\t\t\tmatch = sourceMapRegEx.exec(jsText);\n\t\t}\n\n\t\tif (match) {\n\t\t\tif (match[1]) {\n\t\t\t\trawSourceMap = JSON.parse((new Buffer(match[2], 'base64').toString('utf8')));\n\t\t\t} else {\n\t\t\t\tconst sourceMapPath = path.join(sourceMapDir, match[2]);\n\t\t\t\trawSourceMap = this.readJSON(sourceMapPath);\n\t\t\t\tsourceMapDir = path.dirname(sourceMapPath);\n\t\t\t}\n\t\t}\n\n\t\tif (!match || !rawSourceMap) {\n\t\t\t/* We couldn't find a source map, so will copy coverage after warning. */\n\t\t\tthis.warn(new Error(`Could not find source map for: \"${filePath}\"`));\n\t\t\ttry {\n\t\t\t\tfileCoverage.code = String(fs.readFileSync(filePath)).split('\\n');\n\t\t\t} catch (error) {\n\t\t\t\tthis.warn(new Error(`Could find source for : \"${filePath}\"`));\n\t\t\t}\n\t\t\tthis.sparceCoverageCollector.setCoverage(filePath, fileCoverage);\n\t\t\treturn;\n\t\t}\n\n\t\tsourceMapDir = this.basePath || sourceMapDir;\n\n\t\t// replace relative paths in source maps with absolute\n\t\trawSourceMap.sources = rawSourceMap.sources.map((srcPath) => (\n\t\t\tsrcPath.substr(0, 1) === '.'\n\t\t\t\t? path.resolve(sourceMapDir, srcPath)\n\t\t\t\t: srcPath\n\t\t));\n\n\t\tlet sourceMap = new SourceMapConsumer(rawSourceMap);\n\n\t\t/* if there are inline sources and a store to put them into, we will populate it */\n\t\tconst inlineSourceMap = {};\n\t\tlet origSourceFilename;\n\t\tlet origFileName;\n\t\tlet fileName;\n\n\t\tif (sourceMap.sourcesContent) {\n\t\t\torigSourceFilename = rawSourceMap.sources[0];\n\n\t\t\tif (origSourceFilename && path.extname(origSourceFilename) !== '') {\n\t\t\t\torigFileName = rawSourceMap.file;\n\t\t\t\tfileName = filePath.replace(path.extname(origFileName), path.extname(origSourceFilename));\n\t\t\t\trawSourceMap.file = fileName;\n\t\t\t\trawSourceMap.sources = [fileName];\n\t\t\t\trawSourceMap.sourceRoot = '';\n\t\t\t\tsourceMap = new SourceMapConsumer(rawSourceMap);\n\t\t\t}\n\n\t\t\tsourceMap.sourcesContent.forEach((source, idx) => {\n\t\t\t\tinlineSourceMap[sourceMap.sources[idx]] = true;\n\t\t\t\tthis.sparceCoverageCollector.setSourceCode(\n\t\t\t\t\tsourceMap.sources[idx],\n\t\t\t\t\tcodeIsArray ? source.split('\\n') : source\n\t\t\t\t);\n\t\t\t\tif (this.sourceStore) {\n\t\t\t\t\tthis.sourceStore.set(sourceMap.sources[idx], source);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst resolvePath = (source) => {\n\t\t\tlet resolvedSource = source in inlineSourceMap\n\t\t\t\t? source\n\t\t\t\t: path.resolve(sourceMapDir, source);\n\n\t\t\tif (!this.useAbsolutePaths && !(source in inlineSourceMap)) {\n\t\t\t\tresolvedSource = path.relative(process.cwd(), resolvedSource);\n\t\t\t}\n\t\t\treturn resolvedSource;\n\t\t};\n\n\t\tconst getMappingResolved = (location) => {\n\t\t\tconst mapping = getMapping(sourceMap, location);\n\t\t\tif (!mapping) return null;\n\n\t\t\treturn Object.assign(mapping, { source: resolvePath(mapping.source) });\n\t\t};\n\n\t\tObject.keys(fileCoverage.branchMap).forEach((index) => {\n\t\t\tconst genItem = fileCoverage.branchMap[index];\n\t\t\tconst hits = fileCoverage.b[index];\n\n\t\t\tconst info = remapBranch(genItem, getMappingResolved);\n\n\t\t\tif (info) {\n\t\t\t\tthis.sparceCoverageCollector.updateBranch(info.source, info.srcItem, hits);\n\t\t\t}\n\t\t});\n\n\t\tObject.keys(fileCoverage.fnMap).forEach((index) => {\n\t\t\tconst genItem = fileCoverage.fnMap[index];\n\t\t\tconst hits = fileCoverage.f[index];\n\n\t\t\tconst info = remapFunction(genItem, getMappingResolved);\n\n\t\t\tif (info) {\n\t\t\t\tthis.sparceCoverageCollector.updateFunction(info.source, info.srcItem, hits);\n\t\t\t}\n\t\t});\n\n\t\tObject.keys(fileCoverage.statementMap).forEach((index) => {\n\t\t\tconst genItem = fileCoverage.statementMap[index];\n\t\t\tconst hits = fileCoverage.s[index];\n\n\t\t\tconst mapping = getMappingResolved(genItem);\n\n\t\t\tif (mapping) {\n\t\t\t\tthis.sparceCoverageCollector.updateStatement(mapping.source, mapping.loc, hits);\n\t\t\t}\n\t\t});\n\n\t\t// todo: refactor exposing implementation details\n\t\tconst srcCoverage = this.sparceCoverageCollector.getFinalCoverage();\n\n\t\tif (sourceMap.sourcesContent && this.basePath) {\n\t\t\t// Convert path to use base path option\n\t\t\tconst getPath = filePath => {\n\t\t\t\tconst absolutePath = path.resolve(this.basePath, filePath);\n\t\t\t\tif (!this.useAbsolutePaths) {\n\t\t\t\t\treturn path.relative(process.cwd(), absolutePath);\n\t\t\t\t}\n\t\t\t\treturn absolutePath;\n\t\t\t};\n\t\t\tconst fullSourceMapPath = getPath(\n\t\t\t\torigFileName.replace(path.extname(origFileName), path.extname(origSourceFilename))\n\t\t\t);\n\t\t\tsrcCoverage[fullSourceMapPath] = srcCoverage[fileName];\n\t\t\tsrcCoverage[fullSourceMapPath].path = fullSourceMapPath;\n\t\t\tdelete srcCoverage[fileName];\n\t\t}\n\t}\n\n\taddCoverage(item) {\n\t\tObject.keys(item)\n\t\t\t.forEach((filePath) => {\n\t\t\t\tconst fileCoverage = item[filePath];\n\t\t\t\tthis.addFileCoverage(filePath, fileCoverage);\n\t\t\t});\n\t}\n\n\tgetFinalCoverage() {\n\t\tconst collector = new Collector();\n\n\t\tconst srcCoverage = this.sparceCoverageCollector.getFinalCoverage();\n\n\t\tcollector.add(Object.keys(srcCoverage)\n\t\t\t.filter((filePath) => !this.exclude(filePath))\n\t\t\t.reduce((obj, name) => {\n\t\t\t\tobj[name] = srcCoverage[name];\n\t\t\t\treturn obj;\n\t\t\t}, {}));\n\n\t\t/* refreshes the line counts for reports */\n\t\tcollector.getFinalCoverage();\n\n\t\treturn collector;\n\t}\n}\n\nmodule.exports.CoverageTransformer = CoverageTransformer;\n"]}